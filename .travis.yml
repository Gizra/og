language: php
sudo: false

php:
  - 5.6
  - 7.0

env:
  - TEST_SUITE=8.1.x
  - TEST_SUITE=8.2.x
  - TEST_SUITE=8.3.x
  - TEST_SUITE=PHP_CodeSniffer

# Only run the coding standards check once.
matrix:
  exclude:
    - php: 5.6
      env: TEST_SUITE=PHP_CodeSniffer

mysql:
  database: og
  username: root
  encoding: utf8

before_script:
  # Remove Xdebug as we don't need it and it causes "PHP Fatal error: Maximum
  # function nesting level of '256' reached."
  # We also don't care if that file exists or not on PHP 7.
  - phpenv config-rm xdebug.ini || true

  # Make sure Composer is up to date.
  - composer self-update

  # Remember the current directory for later use in the Drupal installation.
  - MODULE_DIR=$(pwd)

  # Install Composer dependencies for OG.
  - composer install

  # Navigate out of module directory to prevent blown stack by recursive module
  # lookup.
  - cd ..

  # Create database.
  - mysql -e 'create database og'

  # Download Drupal 8 core. Skip this for the coding standards test.
  - test ${TEST_SUITE} == "PHP_CodeSniffer" || travis_retry git clone --branch $TEST_SUITE --depth 1 https://git.drupal.org/project/drupal.git

  # Remember the Drupal installation path.
  - DRUPAL_DIR=$(pwd)/drupal

  # Download Drupal console so we can run the test for it. Skip this for the
  # coding standards test.

  # When downloading DrupalConsole using Composer an old version is supplied.
  # Sepficing the correct version and the versions of DrupalComposer dependancy
  # will fix the problem for now. Need to be removed when https://goo.gl/i6rVhT
  # will be merged.
  - test ${TEST_SUITE} == "PHP_CodeSniffer" || composer require --dev drupal/console:~1.0@rc --working-dir=$DRUPAL_DIR

  # Install Composer dependencies for core. Skip this for the coding standards test.
  - test ${TEST_SUITE} == "PHP_CodeSniffer" || composer install --working-dir=$DRUPAL_DIR

  # Start a web server on port 8888 in the background.
  - test ${TEST_SUITE} == "PHP_CodeSniffer" || nohup php -S localhost:8888 --docroot $DRUPAL_DIR > /dev/null 2>&1 &

  # Wait until the web server is responding.
  - test ${TEST_SUITE} == "PHP_CodeSniffer" || until curl -s localhost:8888; do true; done > /dev/null

  # Export web server URL for browser tests.
  - export SIMPLETEST_BASE_URL=http://localhost:8888

  # Export database variable for kernel tests.
  - export SIMPLETEST_DB=mysql://root:@127.0.0.1/og

script: DRUPAL_DIR=$DRUPAL_DIR MODULE_DIR=$MODULE_DIR $MODULE_DIR/scripts/travis-ci/run-test.sh $TEST_SUITE
